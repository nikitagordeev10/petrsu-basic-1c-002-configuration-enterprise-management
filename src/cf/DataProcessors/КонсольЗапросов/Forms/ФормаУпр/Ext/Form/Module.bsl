
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// На сервере

&НаСервере
Процедура УстановитьКартинкиКоманд()
	
	// Временная заглушка
	Возврат;
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	МакетыОбъекта = ТекущийОбъект.Метаданные().Макеты;
	
	ТипМакетаДвоичныеДанные = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные;
	
	Для Каждого ТекущийМакет Из МакетыОбъекта Цикл 
		Если Не ТекущийМакет.ТипМакета = ТипМакетаДвоичныеДанные Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекущаяКоманда = Команды[СтрЗаменить(ТекущийМакет.Имя, "Картинка", "")];
		
		Если Не ТекущаяКоманда.Картинка.Вид = ВидКартинки.Пустая Тогда 
			Продолжить;
		КонецЕсли;
		
		// ВЫЯСНИТЬ ПОЧЕМУ ВЫДАЕТ ОШИБКУ ПРИ УСТАНОВКЕ КАРТИНКИ!
		ТекущаяКоманда.Картинка = Новый Картинка(ТекущийОбъект.ПолучитьМакет(ТекущийМакет.Имя));
	КонецЦикла;
	
КонецПроцедуры // УстановитьКартинкиКоманд()

&НаСервере
Процедура ПоказатьРезультат(Знач ТекстЗапроса, Знач ПараметрыЗапроса)
	
	ПолучитьМассивЗапросовПакета(ТекстЗапроса);
	
	ВыполнитьПакет = Элементы.РезультатЗапросаВыполнитьПакет.Пометка;
	
	Попытка
		//ЯваСкрипт =
		//	?(ПустаяСтрока(АдресКомпонентыЗамераПроизводительности),
		//	Неопределено,
		//	ПолучитьИзВременногоХранилища(АдресКомпонентыЗамераПроизводительности));
		//
		//ВремяНачалаВыполнения =
		//	?(ЯваСкрипт = Неопределено,
		//	Неопределено,
		//	ЯваСкрипт.Eval("(new Date()).valueOf()"));
		
		ВремяНачалаВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		МассивРезультатов = ПолучитьМассивРезультатов(ТекстЗапроса, ПараметрыЗапроса);
		АдресМассиваРезультатов = ПоместитьВоВременноеХранилище(МассивРезультатов, Новый УникальныйИдентификатор);
		
		ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
		ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
		ОписаниеТиповЧисло  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
		
		Если ВыполнитьПакет Тогда 
			дзРезультатЗапроса = Новый ДеревоЗначений;
			дзРезультатЗапроса.Колонки.Добавить("ПризнакВременнойТаблицы", ОписаниеТиповБулево, "Это временная таблица");
			дзРезультатЗапроса.Колонки.Добавить("ИмяТаблицы",              ОписаниеТиповСтрока, "Имя таблицы");
			дзРезультатЗапроса.Колонки.Добавить("Количество",              ОписаниеТиповЧисло,  "Количество строк результата");
			
			ИндексПакета = 0;
			Для Каждого Результат Из МассивРезультатов Цикл 
				СвойстваЗапроса = МассивЗапросовПакета[ИндексПакета];
				
				СтрокаРезультата = дзРезультатЗапроса.Строки.Добавить();
				СтрокаРезультата.ПризнакВременнойТаблицы = СвойстваЗапроса.ПризнакВременнойТаблицы;
				СтрокаРезультата.ИмяТаблицы              = СвойстваЗапроса.ИмяТаблицы;
				СтрокаРезультата.Количество              = ?(СвойстваЗапроса.ПризнакВременнойТаблицы, Результат.Выгрузить()[0].Количество, Результат.Выбрать().Количество());
				
				ИндексПакета = ИндексПакета + 1;
			КонецЦикла;
		Иначе 
			дзРезультатЗапроса = МассивРезультатов[МассивРезультатов.Количество() - 1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;
		//
		//ВремяОкончанияВыполнения =
		//	?(ЯваСкрипт = Неопределено,
		//	Неопределено,
		//	ЯваСкрипт.Eval("(new Date()).valueOf()"));
		
		ВремяОкончанияВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если ЗначениеЗаполнено(ВремяНачалаВыполнения) И ЗначениеЗаполнено(ВремяОкончанияВыполнения) Тогда 
			ВремяВыполнения = "Время выполнения: " + Формат((ВремяОкончанияВыполнения - ВремяНачалаВыполнения) / 1000, "ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=");
		КонецЕсли;
		
		ПодготовитьКоллекцию(дзРезультатЗапроса.Колонки);
		ЗначениеВРеквизитФормы(дзРезультатЗапроса, "РезультатЗапроса");
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры // ВыполнитьЗапросНаСервере()

&НаСервере
Функция ПоказатьРезультатВременнойТаблицы(ИндексПакета, Знач ПараметрыЗапроса)
	
	ТекстЗапроса = "";
	
	Для ТекущийИндекс = 0 По ИндексПакета - 1 Цикл 
		ТекстЗапроса =
			ТекстЗапроса +
			?(ПустаяСтрока(ТекстЗапроса), "", ";" + Символы.ПС) +
			МассивЗапросовПакета[ТекущийИндекс].ТекстЗапроса;
	КонецЦикла;
	
	ПоследнийЗапросПакета = МассивЗапросовПакета[ИндексПакета].ТекстЗапроса;
	
	ПозицияОператора = Найти(ВРег(ПоследнийЗапросПакета), "ПОМЕСТИТЬ");
	Если ПозицияОператора > 0 Тогда 
		СтрокаОператора       = СокрЛП(СтрПолучитьСтроку(СокрЛП(Сред(ПоследнийЗапросПакета, ПозицияОператора)), 1));
		ПоследнийЗапросПакета = СтрЗаменить(ПоследнийЗапросПакета, СтрокаОператора, "");
	КонецЕсли;
	
	ПозицияОператора = Найти(ВРег(ПоследнийЗапросПакета), "ИНДЕКСИРОВАТЬ");
	Если ПозицияОператора > 0 Тогда 
		СтрокаОператора       = СокрЛП(Сред(ПоследнийЗапросПакета, ПозицияОператора));
		ПоследнийЗапросПакета = СтрЗаменить(ПоследнийЗапросПакета, СтрокаОператора, "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ";" + Символы.ПС) + ПоследнийЗапросПакета;
	
	Возврат ПоместитьВоВременноеХранилище(
		ПолучитьМассивРезультатов(СокрЛП(ТекстЗапроса), ПараметрыЗапроса),
		Новый УникальныйИдентификатор);
	
КонецФункции // ПоказатьРезультатВременнойТаблицы()

&НаСервере
Процедура ПолучитьМассивЗапросовПакета(Знач ТекстЗапроса)
	
	Массив = Новый Массив;
	
	КоличествоЗапросов = СтрЧислоВхождений(ТекстЗапроса, ";");
	Если КоличествоЗапросов = 0 Тогда 
		Массив.Добавить(ПолучитьСвойстваЗапроса(ТекстЗапроса));
	Иначе
		ОставшиесяЗапросы = ТекстЗапроса;
		ОчиститьОтПостороннихСимволов(ОставшиесяЗапросы);
		
		Для НомерЗапроса = 1 По КоличествоЗапросов Цикл 
			КонецЗапроса      = Найти(ОставшиесяЗапросы, ";") - 1;
			ТекущийЗапрос     = СокрЛП(Сред(ОставшиесяЗапросы, 1, КонецЗапроса));
			ОставшиесяЗапросы = СокрЛП(Сред(ОставшиесяЗапросы, КонецЗапроса + 2));
			
			Массив.Добавить(ПолучитьСвойстваЗапроса(ТекущийЗапрос));
		КонецЦикла;
		
		Массив.Добавить(ПолучитьСвойстваЗапроса(ОставшиесяЗапросы));
	КонецЕсли;
	
	МассивЗапросовПакета = Новый ФиксированныйМассив(Массив);
	
КонецПроцедуры // ПолучитьМассивЗапросовПакета()

&НаСервере
Функция ОчиститьОтПостороннихСимволов(ТекстЗапроса)
	
	ПозицияПовторяющихсяСлэшэй = Найти(ТекстЗапроса, "//");
	Пока ПозицияПовторяющихсяСлэшэй > 0 Цикл 
		СтрокаНайденнойПозиции = СтрПолучитьСтроку(Сред(ТекстЗапроса, ПозицияПовторяющихсяСлэшэй), 1);
		Если СтрДлина(СтрокаНайденнойПозиции) = СтрЧислоВхождений(СтрокаНайденнойПозиции, "/") Тогда 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаНайденнойПозиции, "");
		КонецЕсли;
		ПозицияПовторяющихсяСлэшэй = Найти(ТекстЗапроса, "//");
	КонецЦикла;
	
КонецФункции // ОчиститьОтПостороннихСимволов()

&НаСервере
Функция ПолучитьМассивРезультатов(Знач ТекстЗапроса, Знач ПараметрыЗапроса)
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если Найти(ВРег(ТекстЗапроса), "ПОМЕСТИТЬ") > 0 Тогда 
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Для Каждого ТекущийПараметр Из ПараметрыЗапроса Цикл 
		Запрос.УстановитьПараметр(
			ТекущийПараметр.ИмяПараметра,
			?(ТекущийПараметр.СпособУстановки = "Выражение", Вычислить(ТекущийПараметр.ЗначениеПараметра), ТекущийПараметр.ЗначениеПараметра));
			//?(ТекущийПараметр.СпособУстановки = "Выражение", РассчитатьВыражение(ТекущийПараметр.ЗначениеПараметра), ТекущийПараметр.ЗначениеПараметра));
	КонецЦикла;
	//
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции // ПолучитьМассивРезультатов()

&НаСервере
Функция РассчитатьВыражение(Выражение)
	
	РезультатРасчета = "";
	
	Попытка
		Выполнить("РезультатРасчета = " + Выражение);
	Исключение
		СообщениеОбОшибке = Новый СообщениеПользователю;
		СообщениеОбОшибке.Текст = "Не удалось рассчитать выражение по причине: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке.Сообщить();
	КонецПопытки;
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаСервере
Процедура ДобавитьПодчиненныйЭлементКоллекции()
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПустоеЗначение", Новый ОписаниеТипов("Строка"), "РезультатЗапроса"));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ПодчиненныйЭлемент = Элементы.Добавить("РезультатЗапросаПустоеЗначение", Тип("ПолеФормы"), Элементы.РезультатЗапроса);
	ПодчиненныйЭлемент.ПутьКДанным        = "РезультатЗапроса.ПустоеЗначение";
	ПодчиненныйЭлемент.Вид                = ВидПоляФормы.ПолеВвода;
	ПодчиненныйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры // ДобавитьПодчиненныйЭлементКоллекции()

&НаСервере
Процедура ПодготовитьКоллекцию(КоллекцияКолонок)
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы  = Новый Массив;
	Для Каждого Элемент Из Элементы.РезультатЗапроса.ПодчиненныеЭлементы Цикл 
		УдаляемыеРеквизиты.Добавить(Элемент.ПутьКДанным);
		УдаляемыеЭлементы.Добавить(Элементы[Элемент.Имя]);
	КонецЦикла;
	
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл 
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из КоллекцияКолонок Цикл 
		Если Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "РезультатЗапроса", Колонка.Заголовок));
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	Для Каждого Колонка Из КоллекцияКолонок Цикл 
		Если Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда 
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить("РезультатЗапроса" + Колонка.Имя, Тип("ПолеФормы"), Элементы.РезультатЗапроса);
		НовыйЭлемент.ПутьКДанным    = "РезультатЗапроса." + Колонка.Имя;
		НовыйЭлемент.Вид            = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ТолькоПросмотр = Истина;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьКоллекцию()

&НаСервере
Процедура ЗагрузитьЗапросы()
	
	ФайлЗапросов = Новый Файл(ПутьКФайлуЗапросов);
	Если Не ФайлЗапросов.Существует() Тогда 
		Сообщить("Файл не существует!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗначениеВДанныеФормы(ЗначениеИзФайла(ПутьКФайлуЗапросов), ДеревоЗапросов);
	Исключение
		Сообщить("Не соответствие формата исходного файла!", СтатусСообщения.Важное);
	КонецПопытки;
	
	Модифицированность = Ложь;
	
КонецПроцедуры // ЗагрузитьЗапросы()

&НаСервере
Процедура СохранитьЗапросы()
	
	Если ПустаяСтрока(ПутьКФайлуЗапросов) Тогда 
		Сообщить("Не указан путь и имя файла!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ЗначениеВФайл(ПутьКФайлуЗапросов, ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений")));
	
	Модифицированность = Ложь;
	
КонецПроцедуры // СохранитьЗапросы()

&НаСервере
Процедура СохранитьКодЗапроса(ИмяФайла, Значение)
	
	ЗначениеВФайл(ИмяФайла, Значение);
	
КонецПроцедуры // СохранитьКодЗапроса()

&НаСервере
Процедура ПодключитьКомпонентуЗамераПроизводительности()
	
	//Попытка
	//	ЯваСкрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
	//	ЯваСкрипт.Language = "javascript";
	//	
	//	//АдресКомпонентыЗамераПроизводительности = ПоместитьВоВременноеХранилище(ЗначениеВСтрокуВнутр(ЯваСкрипт), Новый УникальныйИдентификатор);
	//Исключение
	//	//Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
	//	//Сообщить("Не возможно подключить MSScriptControl.ScriptControl - замер производительности отключен! " + ИнформацияОбОшибке(), СтатусСообщения.Внимание);
	//КонецПопытки;
	
КонецПроцедуры // ПодключитьКомпонентуЗамераПроизводительности()

&НаСервере
Функция ПолучитьАдресДереваЗапросов()
	
	Возврат ПоместитьВоВременноеХранилище(
		ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений")),
		Новый УникальныйИдентификатор);
	//
КонецФункции // ПолучитьАдресДереваЗапросов()



&НаСервере
Функция ПолучитьАдресПараметровЗапроса(ИдентификаторСтроки)
	
	дз = ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений"));
	Возврат ПоместитьВоВременноеХранилище(
		ЗначениеВСтрокуВнутр(дз.Строки[ИдентификаторСтроки-1].ПараметрыЗапроса),
		Новый УникальныйИдентификатор);
	
КонецФункции // ПолучитьАдресПараметровЗапроса()

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	// Сохраним путь к файлу запросов в хранилище настроек.
	ХранилищеОбщихНастроек.Сохранить(КлючОбработки, "ПутьКФайлуЗапросов", ПутьКФайлуЗапросов);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// На сервере без контекста

&НаСервереБезКонтекста
Функция ПолучитьСвойстваЗапроса(Знач ТекстЗапроса)
	
	Возврат Новый Структура("ТекстЗапроса, ПризнакВременнойТаблицы, ИмяТаблицы",
		ТекстЗапроса,
		Булево(Найти(ВРег(ТекстЗапроса), "ПОМЕСТИТЬ")),
		ПолучитьИмяТаблицы(ТекстЗапроса));
	
КонецФункции // ПолучитьСвойстваЗапроса()

&НаСервереБезКонтекста
Функция ПолучитьИмяТаблицы(Знач ТекстЗапроса)
	
	Если Найти(ВРег(ТекстЗапроса), "ПОМЕСТИТЬ") > 0 Тогда 
		Возврат СокрЛП(СтрЗаменить(СтрПолучитьСтроку(Сред(ТекстЗапроса, Найти(ТекстЗапроса, "ПОМЕСТИТЬ")), 1), "ПОМЕСТИТЬ", ""));
	Иначе
		СтрокаИмени = СокрЛП(СтрПолучитьСтроку(Сред(ТекстЗапроса, Найти(ТекстЗапроса, "ИЗ")), 2));
		СтрокаИмени = СокрЛП(Сред(СтрокаИмени, 1, Найти(СтрокаИмени, "(") - 1));
		
		Возврат СокрЛП(Сред(СтрокаИмени, 1, Найти(ВРег(СтрокаИмени), "КАК") - 1));
	КонецЕсли;
	
КонецФункции // ПолучитьИмяТаблицы()

&НаСервереБезКонтекста
Функция ПреобразоватьКоллекциюВМассив(Коллекция)
	
	РезультатПреобразования = Новый Массив;
	Таблица = Коллекция.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл 
		СтруктураСтроки = Новый Структура;
		Для Каждого КолонкаТаблицы Из Таблица.Колонки Цикл 
			СтруктураСтроки.Вставить(КолонкаТаблицы.Имя, СтрокаТаблицы[КолонкаТаблицы.Имя]);
		КонецЦикла;
		РезультатПреобразования.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(РезультатПреобразования);
	
КонецФункции // ПреобразоватьКоллекциюВМассив()

// На клиенте / На сервере без контекста

// На клиенте

&НаКлиенте
Процедура НастроитьЭлементы(Элемент)
	
	СтрокиДереваЗапросов = ДеревоЗапросов.ПолучитьЭлементы();
	ПерваяСтрокаДереваЗапросов = ?(СтрокиДереваЗапросов.Количество() = 0, СтрокиДереваЗапросов.Добавить(), СтрокиДереваЗапросов[0]);
	ПерваяСтрокаДереваЗапросов.ИмяЗапроса = "Запросы";
	
	ЭтоПерваяСтрокаДереваЗапросов = (СтрокиДереваЗапросов.Индекс(Элемент.ТекущиеДанные) = 0);
	ДоступностьКнопок = Не ЭтоПерваяСтрокаДереваЗапросов И Не Элемент.ТекущиеДанные = Неопределено И Не ПустаяСтрока(Элемент.ТекущиеДанные.ТекстЗапроса);
	
	УстановитьСвойствоЭлементаФормы("ДеревоЗапросовИмяЗапроса",            "ТолькоПросмотр", ЭтоПерваяСтрокаДереваЗапросов);
	УстановитьСвойствоЭлементаФормы("ДеревоЗапросовТекстЗапроса",          "Доступность",    Не ЭтоПерваяСтрокаДереваЗапросов);
	УстановитьСвойствоЭлементаФормы("РезультатЗапросаУстановитьПараметры", "Доступность",    ДоступностьКнопок);
	УстановитьСвойствоЭлементаФормы("РезультатЗапросаВыполнитьЗапрос",     "Доступность",    ДоступностьКнопок);
	УстановитьСвойствоЭлементаФормы("РезультатЗапросаВыполнитьПакет",      "Доступность",    ДоступностьКнопок);
	УстановитьСвойствоЭлементаФормы("ВставитьОператорыЗапроса",            "Доступность",    Не ЭтоПерваяСтрокаДереваЗапросов);
	УстановитьСвойствоЭлементаФормы("ПреобразоватьТекстВКод",              "Доступность",    ДоступностьКнопок);
	УстановитьСвойствоЭлементаФормы("ДобавитьПеренос",                     "Доступность",    ДоступностьКнопок);
	УстановитьСвойствоЭлементаФормы("УбратьПеренос",                       "Доступность",    ДоступностьКнопок);
	УстановитьСвойствоЭлементаФормы("ОткрытьКонструкторЗапроса",           "Доступность",    Не ЭтоПерваяСтрокаДереваЗапросов);
	УстановитьСвойствоЭлементаФормы("ДеревоЗапросовТекстЗапросаКонтекстноеМенюОткрытьКонструкторЗапроса", "Доступность",  Не ЭтоПерваяСтрокаДереваЗапросов);
	
КонецПроцедуры // НастроитьЭлементы()

// Устанавливает свойство ИмяСвойства элемента формы с именем ИмяЭлемента в значение Значение.
// Применяется в тех случаях, когда элемент формы может не быть на форме из-за отсутствия прав у пользователя
// на объект, реквизит объекта или команду.
//
// Параметры:
//  ЭлементыФормы - свойство ЭлементыФормы управляемой формы.
//  ИмяЭлемента   - Строка       - имя элемента формы
//  ИмяСвойства   - Строка       - имя устанавливаемого свойства элемента формы
//  Значение      - Произвольный - новое значение элемента
//
&НаКлиенте
Процедура УстановитьСвойствоЭлементаФормы(ИмяЭлемента, ИмяСвойства, Значение)
	
	ЭлементФормы = Элементы.Найти(ИмяЭлемента);
	Если Не ЭлементФормы = Неопределено Тогда
		ЭлементФормы[ИмяСвойства] = Значение;
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвойствоЭлементаФормы()

&НаКлиенте
Процедура ВызватьДиалогВыбораФайла(Режим)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбораФайла.Заголовок  = "Выберите файл со списком запросов!";
	ДиалогВыбораФайла.Фильтр     = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
	ДиалогВыбораФайла.Расширение = "sel";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда 
		ПутьКФайлуЗапросов = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры // ВызватьДиалогВыбораФайла()

&НаКлиенте
Процедура УправлениеРасширениемРаботыСФайлами()
	
	#Если ВебКлиент Тогда 
		Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
			УстановитьРасширениеРаботыСфайлами();
			Предупреждение(НСтр("ru = 'Расширение работы с файлами успешно установлено'"));
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры // УправлениеРасширениемРаботыСФайлами()

// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчики событий элементов формы

// Обработчики событий формы

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	НастроитьЭлементы(Элемент);
	
КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()

&НаКлиенте
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ДеревоЗапросов.ПолучитьЭлементы().Индекс(Элемент.ТекущиеДанные) = 0 Тогда 
		ВыполнитьЗапросИлиПакет(Команды.ВыполнитьЗапрос);
	КонецЕсли;
	
КонецПроцедуры // ДеревоЗапросовВыбор()

&НаКлиенте
Процедура РезультатЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РезультатЗапроса.ТекущиеДанные;
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено И Не ТекущийЗапрос = Неопределено Тогда 
		Если Элементы.РезультатЗапросаВыполнитьЗапрос.Пометка Тогда 
			ОткрытьЗначение(ТекущиеДанные[СтрЗаменить(Поле.Имя, "РезультатЗапроса", "")]);
		Иначе
			ИндексПакета = РезультатЗапроса.ПолучитьЭлементы().Индекс(ТекущиеДанные);
			
			ОткрытьФорму(
				ПутьКФормамОбработки + "ФормаРезультатаПакета",
				Новый Структура("АдресМассиваРезультатов, ИндексПакета, Отображение, ИмяТаблицы",
				?(ТекущиеДанные.ПризнакВременнойТаблицы, ПоказатьРезультатВременнойТаблицы(ИндексПакета, ТекущийЗапрос.ПараметрыЗапроса), АдресМассиваРезультатов),
				ИндексПакета,
				?(Элемент.Отображение = ОтображениеТаблицы.Список, 0, ?(Элемент.Отображение = ОтображениеТаблицы.ИерархическийСписок, 1, 2)),
				ТекущиеДанные.ИмяТаблицы),
				ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РезультатЗапросаВыбор()

&НаКлиенте
Процедура ДеревоЗапросовТекстЗапросаПриИзменении(Элемент)
	
	НастроитьЭлементы(Элементы.ДеревоЗапросов);
	
КонецПроцедуры // ДеревоЗапросовТекстЗапросаПриИзменении()

// На сервере

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьКартинкиКоманд();
	ДобавитьПодчиненныйЭлементКоллекции();
	
	КлючОбработки        = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	ПутьКФормамОбработки = КлючОбработки + ".Форма.";
	
	ПодключитьКомпонентуЗамераПроизводительности();
	
	// Загрузим сохраненное дерево запросов.
	ПутьКФайлуЗапросов = ХранилищеОбщихНастроек.Загрузить(КлючОбработки, "ПутьКФайлуЗапросов", ПутьКФайлуЗапросов);
	Если Не ПустаяСтрока(ПутьКФайлуЗапросов) Тогда 
		ЗагрузитьЗапросы();
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// На клиенте

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Найти(ИсточникВыбора.ИмяФормы, "ФормаПараметровУпр") > 0 Тогда 
		
		ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
		Если ТекущийЗапрос = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыЗапроса = ТекущийЗапрос.ПараметрыЗапроса;
		ПараметрыЗапроса.Очистить();
		Для Каждого ТекущееЗначение Из ВыбранноеЗначение Цикл 
			Если Не ЗначениеЗаполнено(ТекущееЗначение.ИмяПараметра) Тогда 
				Продолжить;
			КонецЕсли;
			СтрокаПараметра = ПараметрыЗапроса.Добавить();
			СтрокаПараметра.ИмяПараметра      = ТекущееЗначение.ИмяПараметра;
			СтрокаПараметра.СпособУстановки   = ТекущееЗначение.СпособУстановки;
			СтрокаПараметра.ЗначениеПараметра = ТекущееЗначение.ЗначениеПараметра;
			СтрокаПараметра.ТипЗначения       = ТекущееЗначение.ТипЗначения;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность
		И Вопрос("Сохранить запросы в файл?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Внимание!") = КодВозвратаДиалога.Да Тогда 
		
		Если ПустаяСтрока(ПутьКФайлуЗапросов) Тогда 
			ВызватьДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		КонецЕсли;
		
		СохранитьЗапросы();
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры // ПриЗакрытии()

// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ДЕЙСТВИЙ

&НаКлиенте
Процедура ВставитьОператорыЗапроса(Команда)
	
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	
	ОператорыЗапроса =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	 КАК 
	|ГДЕ
	|	
	|
	|СГРУППИРОВАТЬ ПО
	|	
	|
	|УПОРЯДОЧИТЬ ПО
	|	
	|ИТОГИ ПО
	|	";
	
	Если ТекущийЗапрос.ТекстЗапроса = ОператорыЗапроса Тогда 
		Возврат;
	ИначеЕсли Не ПустаяСтрока(ТекущийЗапрос.ТекстЗапроса)
		И Вопрос("Действие приведет к очистке текущего текста запроса! Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Внимание!") = КодВозвратаДиалога.Нет Тогда 
		
		Возврат;
	КонецЕсли;
	
	ТекущийЗапрос.ТекстЗапроса = ОператорыЗапроса;
	
КонецПроцедуры // ВставитьОператорыЗапроса()

&НаКлиенте
Процедура НовоеДеревоЗапросов(Команда)
	
	ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	РезультатЗапроса.ПолучитьЭлементы().Очистить();
	
	МассивЗапросовПакета    = Новый ФиксированныйМассив(Новый Массив);
	АдресМассиваРезультатов = "";
	ПутьКФайлуЗапросов      = "";
	
КонецПроцедуры // НовоеДеревоЗапросов()

&НаКлиенте
Процедура ЗагрузитьЗапросыИзФайла(Команда)
	
	УправлениеРасширениемРаботыСФайлами();
	
	ВызватьДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ЗагрузитьЗапросы();
	
КонецПроцедуры // ЗагрузитьЗапросыИзФайла()

&НаКлиенте
Процедура СохранитьЗапросыВФайл(Команда)
	
	УправлениеРасширениемРаботыСФайлами();
	
	Если ПустаяСтрока(ПутьКФайлуЗапросов) Тогда 
		ВызватьДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПутьКФайлуЗапросов) Тогда 
		СохранитьЗапросы();
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросыВФайл()

&НаКлиенте
Процедура СохранитьЗапросыВФайлКак(Команда)
	
	ВызватьДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Если Не ПустаяСтрока(ПутьКФайлуЗапросов) Тогда 
		СохранитьЗапросы();
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросыВФайлКак()

// Процедура-обработчик действия "ОткрытьКонструкторЗапроса"
//  контекстного меню "ДеревоЗапросовТекстЗапроса".
//
// Параметры:
//
&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
		Попытка
			Если ТекущийЗапрос = Неопределено
				Или ПустаяСтрока(ТекущийЗапрос.ТекстЗапроса) Тогда 
				Конструктор = Новый КонструкторЗапроса();
			Иначе
				Конструктор = Новый КонструкторЗапроса(ТекущийЗапрос.ТекстЗапроса);
			КонецЕсли;
			
			Если Конструктор.ОткрытьМодально()
				И Не ТекущийЗапрос = Неопределено Тогда 
				ТекущийЗапрос.ТекстЗапроса = Конструктор.Текст;
			КонецЕсли;
		Исключение
			ТекстЗапроса = "";
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
		КонецПопытки;
		НастроитьЭлементы(Элементы.ДеревоЗапросов);
	#Иначе
		Сообщить("Конструктор запросов доступен только в ""Толстом клиенте""!", СтатусСообщения.Важное);
	#КонецЕсли
	
КонецПроцедуры // ОткрытьКонструкторЗапроса()

&НаКлиенте
Процедура УстановитьПараметры(Команда)
	
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если Не ТекущийЗапрос = Неопределено Тогда 
		ОткрытьФорму(
			ПутьКФормамОбработки + "ФормаПараметровУпр",
			Новый Структура("АдресДереваЗапросов, АдресПараметровЗапроса, ТекстЗапроса, ПутьКФормамОбработки, ИдентификаторЗапроса",
			ПолучитьАдресДереваЗапросов(),
			ПолучитьАдресПараметровЗапроса(Элементы.ДеревоЗапросов.ТекущаяСтрока),
			ТекущийЗапрос.ТекстЗапроса,
			ПутьКФормамОбработки,
			Элементы.ДеревоЗапросов.ТекущаяСтрока),
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметры()

&НаКлиенте
Процедура ВыполнитьЗапросИлиПакет(Команда)
	
	ИмяКоманды = Команда.Имя;
	Элементы["РезультатЗапроса" + ИмяКоманды].Пометка = Истина;
	Элементы["РезультатЗапроса" + ?(ИмяКоманды = "ВыполнитьЗапрос", "ВыполнитьПакет", "ВыполнитьЗапрос")].Пометка = Ложь;
	
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если Не ТекущийЗапрос = Неопределено Тогда 
		
		Если ПустаяСтрока(ТекущийЗапрос.ТекстЗапроса) Тогда 
			СообщитьПользователю = Новый СообщениеПользователю;
			СообщитьПользователю.Текст       = "Отсутствует текст запроса!";
			СообщитьПользователю.Поле        = "ДеревоЗапросовТекстЗапроса";
			СообщитьПользователю.ПутьКДанным = "Элементы.ДеревоЗапросов.ТекущиеДанные.ТекстЗапроса";
			СообщитьПользователю.Сообщить();
			
			Возврат;
		КонецЕсли;
		
		ПоказатьРезультат(ТекущийЗапрос.ТекстЗапроса, ТекущийЗапрос.ПараметрыЗапроса);
		
		ВыполнитьЗапрос = Элементы.РезультатЗапросаВыполнитьЗапрос.Пометка;
		
		УстановитьСвойствоЭлементаФормы(
			"РезультатЗапроса",
			"Отображение",
			?(ВыполнитьЗапрос
			И Найти(ВРег(МассивЗапросовПакета[МассивЗапросовПакета.Количество() - 1].ТекстЗапроса), "ИТОГИ") > 0,
			ОтображениеТаблицы.Дерево,
			ОтображениеТаблицы.Список));
		
		// Определим доступность команд перемещения и сортировки строк результата запроса,
		//  в зависимости от вида получаемых данных: запрос / пакет запросов.
		//  Можно было бы ограничиться одной строкой кода, определяющей значение свойства "ИзменятьПорядокСтрок" таблицы формы,
		//  но по непонятным причинам данный способ работает некоректно.
		УстановитьСвойствоЭлементаФормы("РезультатЗапросаПереместитьВверх",                "Видимость", ВыполнитьЗапрос);
		УстановитьСвойствоЭлементаФормы("РезультатЗапросаКонтекстноеМенюПереместитьВверх", "Видимость", ВыполнитьЗапрос);
		УстановитьСвойствоЭлементаФормы("РезультатЗапросаПереместитьВниз",                 "Видимость", ВыполнитьЗапрос);
		УстановитьСвойствоЭлементаФормы("РезультатЗапросаКонтекстноеМенюПереместитьВниз",  "Видимость", ВыполнитьЗапрос);
		УстановитьСвойствоЭлементаФормы("РезультатЗапросаСортироватьСписокПоВозрастанию",  "Видимость", ВыполнитьЗапрос);
		УстановитьСвойствоЭлементаФормы("РезультатЗапросаСортироватьСписокПоУбыванию",     "Видимость", ВыполнитьЗапрос);
		
		УстановитьСвойствоЭлементаФормы("ВремяВыполнения", "Заголовок", ВремяВыполнения);
		УстановитьСвойствоЭлементаФормы("ВремяВыполнения", "Видимость", Не ПустаяСтрока(ВремяВыполнения));
		
		УстановитьСвойствоЭлементаФормы("Комментарий", "Заголовок", "Количество строк результата: " + Формат(РезультатЗапроса.ПолучитьЭлементы().Количество(), "ЧЦ=15; ЧДЦ=0; ЧРГ=' '; ЧН=0"));
		УстановитьСвойствоЭлементаФормы("Комментарий", "Видимость", ВыполнитьЗапрос);
		
		УстановитьСвойствоЭлементаФормы("РезультатЗапросаИзменить", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗапросИлиПакет()

&НаКлиенте
Процедура ПреобразоватьТекстВКод(Команда)
	
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяЗапроса = ?(ПустаяСтрока(ТекущийЗапрос.ИмяЗапроса), "Запрос", ТекущийЗапрос.ИмяЗапроса);
	ВвестиСтроку(ИмяЗапроса, "Введите имя запроса!");
	
	КодЗапроса = "";
	Для НомерСтроки = 1 По СтрЧислоСтрок(ТекущийЗапрос.ТекстЗапроса) Цикл
		КодЗапроса = КодЗапроса +
					?(НомерСтроки = 1, "", Символы.ПС + "|") +
					СтрПолучитьСтроку(ТекущийЗапрос.ТекстЗапроса, НомерСтроки);
	КонецЦикла;
	
	КодЗапроса = СтрЗаменить(КодЗапроса, Символ(34), Символ(34) + Символ(34));
	КодЗапроса = "Запрос = Новый Запрос(" + Символы.ПС + """" + КодЗапроса + """);" + Символы.ПС;
	
	Если Найти(ВРег(ТекущийЗапрос.ТекстЗапроса), "ПОМЕСТИТЬ") > 0 Тогда 
		КодЗапроса = КодЗапроса + Символы.ПС + "Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;";
	КонецЕсли;
	
	Для Каждого Параметр Из ТекущийЗапрос.ПараметрыЗапроса Цикл 
		КодЗапроса = КодЗапроса + Символы.ПС +
			"Запрос.УстановитьПараметр(""" + Параметр.ИмяПараметра + """, <" + Параметр.ИмяПараметра + ">);" +
			" // " + Параметр.ТипЗначения + ".";
	КонецЦикла;
	
	КодЗапроса = КодЗапроса + Символы.ПС + Символы.ПС + "РезультатЗапроса = Запрос.Выполнить();";
	КодЗапроса = КодЗапроса + Символы.ПС + Символы.ПС + "ВыборкаДетальныеЗаписи = Результат.Выбрать();";
	
	КодЗапроса = КодЗапроса + Символы.ПС + "Пока ВыборкаДетальныеЗаписи.Следующий() Цикл";
	КодЗапроса = КодЗапроса + Символы.ПС + "// Вставить обработку выборки ВыборкаДетальныеЗаписи";
	КодЗапроса = КодЗапроса + Символы.ПС + "КонецЦикла;";
	
	Если ВвестиСтроку(КодЗапроса, "Код запроса...",, Истина) Тогда 
		ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораКаталога.Заголовок  = "Выберите каталог сохранения!";
		
		Если ДиалогВыбораКаталога.Выбрать() Тогда 
			СохранитьКодЗапроса(ДиалогВыбораКаталога.ПолноеИмяФайла + ИмяЗапроса + ".txt", КодЗапроса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПреобразоватьТекстВКод()

&НаКлиенте
Процедура ОтправитьОтзывПредложение(Команда)
	
	ЗапуститьПриложение("mailto:anatoliy.kichuk@gmail.com?subject=Отзыв / предложение по Консоли запросов...");
	
КонецПроцедуры // ОтправитьОтзывПредложение()

&НаКлиенте
Процедура ДобавитьПеренос(Команда)
	
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса      = ТекущийЗапрос.ТекстЗапроса;
	КоличествоСтрок   = СтрЧислоСтрок(ТекстЗапроса);
	НовыйТекстЗапроса = "";
	Для НомерСтроки = 1 По КоличествоСтрок Цикл 
		ТекущаяСтрока     = СтрПолучитьСтроку(ТекстЗапроса, НомерСтроки);
		НовыйТекстЗапроса = НовыйТекстЗапроса + ?(Лев(ТекущаяСтрока, 1) = "|", "", "|") + ТекущаяСтрока + ?(НомерСтроки = КоличествоСтрок, "", Символы.ПС);
	КонецЦикла;
	ТекущийЗапрос.ТекстЗапроса = НовыйТекстЗапроса;
	
КонецПроцедуры // ДобавитьПеренос()

&НаКлиенте
Процедура УбратьПеренос(Команда)
	
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийЗапрос.ТекстЗапроса = СтрЗаменить(ТекущийЗапрос.ТекстЗапроса, "|", "");
	
КонецПроцедуры // УбратьПеренос()





























